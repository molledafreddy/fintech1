<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Assets\ResourceFunctions;
use Illuminate\Support\MessageBag;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Credit;
use App\Account;
use App\CustomerUser;
use App\HistoricalImport;
use Auth;
use Excel;
use Carbon\Carbon;
use App\Http\Traits\TransferFile;

class TransferController extends Controller
{
	use TransferFile;

	public function index()
    {

        return view('admin.transfer-file.index'); 
    }


	public function listCredits()
	{ 
		$target = request()->search;
	    Log::info('Dentro del controlador: ' .$target);
	    
	    if ($target=='0'){
            $target = 'pending_processing';
        }else if ($target=='1') {
            $target = 'processing';
        }else if ($target == '2') {
            $target = 'error';
        }else if ($target == '3'){
            $target = 'ready';
        }

	    return [
		  'credits' => Credit::with(['order.customer_users.bank','order.customer_users.user','order.customer_users.customer'])
    						->search( $target)
	     					->orderBy('id', 'desc')
	     					->paginate()	
		]; 
	}
	/**
	 * [importFileTransfer description: method that allows to process the log file of transfers, generated by the bank]
	 * @return [type] [description]
	 */
	public function importFileTransfer()
	{
		Log::info('ingreso al controlador TransferController@importFileTransfer '.Auth::user()->name);
		$v = \Validator::make(request()->all(), [            
            'file' => 'required',
        ]);
        
        $errors = $v->errors();
        $message=[];
        $data = [];

        foreach ($errors->all() as  $mess) {
            $message[]=$mess.'  ';
        }

        if ($v->fails())
        {
            return [
                'message' => $message,
                'status' => false,
            ];
        }

		$file = fopen(request()->file, "r");
		$i=0;
		/*
		*while there is a row
		*/
		while(!feof($file)){
			/*
			*method that allows to capture each line of the file
			*/
			$linea = fgets($file,1000);
			/*
			*generate array via the separator "|" which is the one with the txt file
			*/
			$data_file[$i]= explode(';',trim($linea));
			

			$i++;
		}//while close
		/*
		*arrangement with the header that the file must have
		*/
		$validator = [ 0=> 4, 1=> 8];

		$names_key=['account_number'=> 4, 'status' => 8 ];
			
		$r=0;
		foreach ($data_file as $key => $value) {
			if ( isset($value['2']) && trim($value['2']) =='PRESTAMO FINCTECH' ) {
			Log::info('informacion al recorrer el arrreglo'.$value['4']);
				$data[$r]=[
					'account_number' => trim($value['4']),
					'amount'		 => trim($value['5']),
					'status'		 => trim($value['8'])			
				];
			}
			$r++;		
		}	

        $historical_import = HistoricalImport::where('name',request()->loadFileName)->first();

        $keys=[0=> 4, 1=> 8, ];
       
       if (count($historical_import)>0) {
    		return[
            'message' => 'Este archivo ya ha sido procesado',
            'status'  => null
        	];	
    	
    	}else if ((empty($data )) || (count($data)==0)) {
            
            return [  
                'message' => 'El archivo que cargo no posee datos',
                'status'  => null
            ];

        }else if ( ResourceFunctions::validateHeadboardTransfer($keys, $data)) {
            /*
            *Validate that the file header is correct
            */
            return [
            	'message' => 'La estructura del archivo no es la correcta',
       			'status'  => null
       		];
            
        }else if (ResourceFunctions::validateColumnVoid( array_column($data, 'account_number') )==false) {
            /*
            *Validate that the account_number column is not void
            */
            return [  
                'message' => 'La columna ACCOUNT_NUMBER no debe tener campos vacios',
                'status'  => null
            ];
        }else if (ResourceFunctions::validateColumnVoid( array_column($data, 'amount') )==false) {
            /*
            *Validate that the PHONE column is not void
            */ 
            return[
                'message' => 'La columna RESULT no debe tener campos vacios',
                'status'  => null
            ];
        }else{
        	/**
        	 * [$customer_users description: querry of all account number]
        	 * @var [type:]
        	 */
        	$customer_users = CustomerUser::select('*')->get()->toArray();
        	/**
        	 * [$credit description: querry of credits that are being processed]
        	 * @var [type: array with the results of the process]
        	 */
        	$credits = Credit::with('order.customer_users')->where('status','processing')->get();
        	
        	try {
                DB::beginTransaction();

	        	foreach ($data as $key => $valueData) {
	        		
	        		
		            if ( in_array($valueData['account_number'], array_column($customer_users, 'acconunt_number') ) ) 
                    {
                    	$result =ResourceFunctions::searchCredit($credits, $valueData['account_number'], $valueData['amount'] );

                    	if ($result['id']!=false) {

	            				if ($valueData['status']== 'Aceptado') {

		            				$container_credits[] = [
		                                'account_number'    => $valueData['account_number'],
		                                'account_status'    => 'Transaccíon procesada con exíto',
		                                'status'            => true,
		                            ];

	                            	$v_status = 'ready';
	                            }else{

	                            	$container_credits[] = [
			                            'account_number'    => $valueData['account_number'],
			                            'account_status'    => 'Transaccíon rechazada por el banco',
			                            'status'    		=> false,
			                        ];

	                            	$v_status = 'error';
	                            }
	                            $c = Credit::FindOrFail($result['id'])
	        					->update( ['status'=> $v_status]);

	        					if ($c) {

	        						ResourceFunctions::sendMessage($result['phone'], "La solicitud de prestamo con un monto de: ".$valueData['amount'].' fue '.$valueData['status'] );
						           	Log::info("La solicitud de prestamo con un monto de: ".$valueData['amount'].' fue '.$valueData['status']);
	        					}
                    	}else{
                    		$container_credits[] = [
	                            'account_number'    => $valueData['account_number'],
	                            'account_status'    => 'Transaccíon no conseguida en base de datos',
	                            'status'            => false,
	                        ];
                    	}                     
                    
                    }else{

                    	$container_credits[] = [
                            'account_number'    => $valueData['account_number'],
                            'account_status'    => 'Cuenta no registrada en la base de datos',
                            'status'            => false,
                        ];
                    }		
	        			
	        	}//close foreach

        	DB::commit();   
            } catch (Exception $e) {
            	Log::error('Ah ocurrido un error en TransferController@importFileTransfer: ' . $e );
            	return ['message' => 'Ocurrio un error al realizar la operacion',
            			'credits' => null,
            			'status'  => false	
            			];
                DB::rollBack();
            }
            return [  
                'message' => 'La Operacion se realizo con exíto',
                'credits' => $container_credits,
                'status'  => true
            ];	

        }

	}//cierre del metodo

	/**
	 * [TransferOtherBanks description: method that allows to generate the file of transfers to other banks]
	 */
    public function TransferOtherBanks()
	{
		Log::info("paso por el proceso de generar archivo de transferencia TransferOtherBanks: ");
		
		try {
			//metodo trait que gener elarchivo pra transferencias a otros bancos
			$data=$this->TransferOther();
			
			if (count($data['container_name_file'])>0) {
				return [
		            'message' => 'El proceso se realizo con exíto',
		            'status' => 1,
		            'fileNameOtherBank' => $data['container_name_file'],
		            'contenedor' => $data['contenedor']
		        ];

			}else if( (count($data['container_name_file'])<=0) && ($data['contenedor']>0) ){ 
				return [
		            'message' => 'Quedaron solicitudes pendiente debido a que superan el monto maxímo disponible por la cuentas de Fintech',
		            'status' => 0,
		            'fileNameOtherBank' => 0
		        ];		
			}else{
				return [
		            'message' => 'No hay creditos pendientes por procesar',
		            'status' => 0,
		            'fileNameOtherBank' => 0
		        ];

			}	
			
		} catch (Exception $e) {
    		Log::error("Ha ocurrido un error al intentar generar el archivo [$e]");
            return response()->json(['status', 'Ocurrio un error al generar el archivo de transferencia a otros bancos'], 500);
    	}
 
	}

	/**
	 * [TransferSantanderBank description:method that allows to generate the file of transfers to Santander banks]
	 */
	public function TransferSantanderBank()
	{

		Log::info("paso por el proceso de generar archivo de transferencia TransferOtherBanks: ");
		
		try {
			//metodo trait que gener elarchivo pra transferencias a cuentas del banco santander
			$data=$this->TransferSantander();

			 if (count($data['container_name_file'])>0) {
				return [
		            'message' => 'El proceso se realizo con exíto',
		            'status' => 1,
		            'fileNameSantanderBank' => $data['container_name_file'],
		            'contenedor' => $data['contenedor']
		        ];

			}else if( (count($data['container_name_file'])<=0) && ($data['contenedor']>0) ){ 
				return [
		            'message' => 'Quedaron solicitudes pendiente debido a que superan el monto maxímo disponible por la cuentas de Fintech',
		            'status' => 0,
		            'fileNameSantanderBank' => 0
		        ];		
			}else{
				return [
		            'message' => 'No hay creditos pendientes por procesar',
		            'status' => 0,
		            'fileNameSantanderBank' => 0
		        ];

			}
		} catch (Exception $e) {
    		Log::error("Ha ocurrido un error al intentar generar el archivo [$e]");
            return response()->json(['status', 'Ocurrio un error al generar el archivo de transferencia a otros bancos'], 500);
    	}
		
	}

}
